#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('chat-server:server');
var http = require('http');
var mongoose = require('mongoose');
require('dotenv').config();

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT);
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

// socket.io

const io = require("socket.io")(server, {
  cors: {
    origin: "https://proquest.onrender.com", 
    methods: ["GET", "POST"],
    allowedHeaders: ["my-custom-header"],
    credentials: true
  }
});

const uri = process.env.MONGODB_CONNECTION_STRING;
mongoose.connect(`${uri}`, {
useNewUrlParser: true,
useUnifiedTopology: true
});

var messageSchema = mongoose.Schema({
user: String,
message: String
});

var Message = mongoose.model('Message', messageSchema);

io.on('connection', async function (socket) {
  console.log('client connected!')

  const pastMessages = await Message.find({});
  socket.emit('pastMessages', pastMessages);

  process.nextTick(() => {
    socket.on('message', function (data) {
      console.log("Message from:", data.user, "Message:", data.message);

      var newMessage = new Message({ user: data.user, message: data.message });
    
      try {
        newMessage.save();
        console.log("Emit to all!");
        io.emit('message', data); 
      } catch (error) {
        console.log(error);
      }
    });
  });

});